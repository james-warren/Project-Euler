## JLW Project Euler Ex 2  23/04/14


##Each new term in the Fibonacci sequence is generated by adding the previous
##two terms. By starting with 1 and 2, the first 10 terms will be:
## 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
## By considering the terms in the Fibonacci sequence whose values do not
## exceed four million, find the sum of the even-valued terms.

##

## note can do n, nprev, limit = 1, 0, 4000000 if you prefer.

n = 1
nprev = 1
limit = 4000000

m = n + nprev
tot = 0

while n < limit:
    m = n + nprev
    print (n)    ## checks that sequence is populated correctly.

    if (n%2 == 0):
        tot = tot + n

    nprev = n

    n = m
#finish while loop, then print the final calculated total.
print ("Total of odd terms", tot)
    
## seems to work OK, tot verified by internet.  Had to swap the limit to n < limit not m < limit as first thought.
## (using m gives you an extra unwanted term above the limit."out-by-one" error.

# however there are articles on Fibonacci sequence calc efficiency
# see http://projeuler.wordpress.com/2010/07/08/project-euler-solution-2/
